org: gsibiyatut
app: ai-tutor-platform
service: ai-tutor-app

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs20.x
  region: ${opt:region, 'us-east-2'}
  stage: ${opt:stage, 'dev'}
  apiGateway:
    restApiId: f4820upxvb
    restApiRootResourceId: 4vysqkpzq9
  environment:
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    FILES_TABLE: ${self:service}-files-${self:provider.stage}
    CHATS_TABLE: ${self:service}-chats-${self:provider.stage}
    MESSAGES_TABLE: ${self:service}-messages-${self:provider.stage}
    FILES_BUCKET: ${self:service}-files-${self:provider.stage}
    EDUCATOR_FILES_TABLE: ${self:service}-educator-files-${self:provider.stage}
    USERS_TABLE: ${self:service}-users-${self:provider.stage}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FILES_TABLE}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CHATS_TABLE}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CHATS_TABLE}/index/*"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MESSAGES_TABLE}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MESSAGES_TABLE}/index/*"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EDUCATOR_FILES_TABLE}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EDUCATOR_FILES_TABLE}/index/*"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}"
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
            - s3:GetObjectUrl
          Resource:
            - "arn:aws:s3:::${self:provider.environment.FILES_BUCKET}/*"
        - Effect: Allow
          Action:
            - s3:ListBucket
          Resource:
            - "arn:aws:s3:::${self:provider.environment.FILES_BUCKET}"

functions:
  # File operations
  getFiles:
    handler: src/handlers/files.getFiles
    events:
      - http:
          path: /files
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-User-Role
              - X-User-Id
            allowCredentials: false

  getFile:
    handler: src/handlers/files.getFile
    events:
      - http:
          path: /files/{fileId}
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-User-Role
              - X-User-Id
            allowCredentials: false

  createFile:
    handler: src/handlers/files.createFile
    events:
      - http:
          path: /files
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-User-Role
              - X-User-Id
            allowCredentials: false

  downloadFile:
    handler: src/handlers/files.downloadFile
    events:
      - http:
          path: /files/{fileId}/download
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-User-Role
              - X-User-Id
            allowCredentials: false

  deleteFile:
    handler: src/handlers/files.deleteFile
    events:
      - http:
          path: /files/{fileId}
          method: delete
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-User-Role
              - X-User-Id
            allowCredentials: false

  # Chat operations  
  getChats:
    handler: src/handlers/chat.getChats
    events:
      - http:
          path: /chat
          method: get
          cors: true

  getChat:
    handler: src/handlers/chat.getChat
    events:
      - http:
          path: /chat/{chatId}
          method: get
          cors: true

  createChat:
    handler: src/handlers/chat.createChat
    events:
      - http:
          path: /chat
          method: post
          cors: true

  updateChat:
    handler: src/handlers/chat.updateChat
    events:
      - http:
          path: /chat/{chatId}
          method: put
          cors: true

  deleteChat:
    handler: src/handlers/chat.deleteChat
    events:
      - http:
          path: /chat/{chatId}
          method: delete
          cors: true

  # Message operations
  getMessages:
    handler: src/handlers/chat.getMessages
    events:
      - http:
          path: /chat/{chatId}/messages
          method: get
          cors: true

  sendMessage:
    handler: src/handlers/chat.sendMessage
    events:
      - http:
          path: /chat/{chatId}/messages
          method: post
          cors: true

  # Educator file operations
  educatorGetFiles:
    handler: src/handlers/educatorFiles.getFiles
    events:
      - http:
          path: /educator/files
          method: get
          cors: true

  educatorCreateFile:
    handler: src/handlers/educatorFiles.createFile
    events:
      - http:
          path: /educator/files
          method: post
          cors: true

  educatorUpdateFile:
    handler: src/handlers/educatorFiles.updateFile
    events:
      - http:
          path: /educator/files/{fileId}
          method: put
          cors: true

  educatorDeleteFile:
    handler: src/handlers/educatorFiles.deleteFile
    events:
      - http:
          path: /educator/files/{fileId}
          method: delete
          cors: true

  educatorDownloadFile:
    handler: src/handlers/educatorFiles.downloadFile
    events:
      - http:
          path: /educator/files/{fileId}/download
          method: get
          cors: true

  # AWS Test endpoint
  awsTest:
    handler: src/handlers/awsTest.test
    events:
      - http:
          path: /aws/test
          method: get
          cors: true

  # Admin Test endpoints
  adminTest:
    handler: src/handlers/adminTest.test
    events:
      - http:
          path: /admin/test
          method: get
          cors: true

  adminSystemHealth:
    handler: src/handlers/adminTest.systemHealth
    events:
      - http:
          path: /admin/health
          method: get
          cors: true

  # Admin Data Management endpoints
  adminGetTableData:
    handler: src/handlers/adminData.getTableData
    events:
      - http:
          path: /admin/tables/{tableName}/data
          method: get
          cors: true

  adminCreateTableItem:
    handler: src/handlers/adminData.createItem
    events:
      - http:
          path: /admin/tables/{tableName}/items
          method: post
          cors: true

  adminUpdateTableItem:
    handler: src/handlers/adminData.updateItem
    events:
      - http:
          path: /admin/tables/{tableName}/items/{itemId}
          method: put
          cors: true

  adminDeleteTableItem:
    handler: src/handlers/adminData.deleteItem
    events:
      - http:
          path: /admin/tables/{tableName}/items/{itemId}
          method: delete
          cors: true

  adminGetTableSchema:
    handler: src/handlers/adminData.getTableSchema
    events:
      - http:
          path: /admin/tables/{tableName}/schema
          method: get
          cors: true

  # Users operations
  getUsers:
    handler: src/handlers/users.getUsers
    events:
      - http:
          path: /users
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-User-Role
              - X-User-Id
            allowCredentials: false

  createUser:
    handler: src/handlers/users.createUser
    events:
      - http:
          path: /users
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-User-Role
              - X-User-Id
            allowCredentials: false

  updateUser:
    handler: src/handlers/users.updateUser
    events:
      - http:
          path: /users/{userId}
          method: put
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-User-Role
              - X-User-Id
            allowCredentials: false

  deleteUser:
    handler: src/handlers/users.deleteUser
    events:
      - http:
          path: /users/{userId}
          method: delete
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-User-Role
              - X-User-Id
            allowCredentials: false

resources:
  Resources:
    # DynamoDB Tables
    FilesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.FILES_TABLE}
        AttributeDefinitions:
          - AttributeName: fileId
            AttributeType: S
        KeySchema:
          - AttributeName: fileId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    ChatsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CHATS_TABLE}
        AttributeDefinitions:
          - AttributeName: chatId
            AttributeType: S
          - AttributeName: studentId
            AttributeType: S
        KeySchema:
          - AttributeName: chatId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: StudentIdIndex
            KeySchema:
              - AttributeName: studentId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    MessagesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.MESSAGES_TABLE}
        AttributeDefinitions:
          - AttributeName: messageId
            AttributeType: S
          - AttributeName: chatId
            AttributeType: S
        KeySchema:
          - AttributeName: messageId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ChatIdIndex
            KeySchema:
              - AttributeName: chatId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    # Educator Files Table
    EducatorFilesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.EDUCATOR_FILES_TABLE}
        AttributeDefinitions:
          - AttributeName: fileId
            AttributeType: S
          - AttributeName: moduleCode
            AttributeType: S
          - AttributeName: uploadedBy
            AttributeType: S
        KeySchema:
          - AttributeName: fileId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ModuleCodeIndex
            KeySchema:
              - AttributeName: moduleCode
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: UploadedByIndex
            KeySchema:
              - AttributeName: uploadedBy
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    # Users Table
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USERS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    # S3 Bucket for file storage
    FilesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.FILES_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
              MaxAge: 3000

plugins:
  - serverless-offline

custom:
  serverless-offline:
    httpPort: 3000
